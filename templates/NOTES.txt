1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "ejabberd.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "ejabberd.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "ejabberd.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.http.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "ejabberd.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Access ejabberd services:

   Admin Interface: http://YOUR_IP:{{ .Values.service.http.port }}/admin/
   REST API:        http://YOUR_IP:{{ .Values.service.http.port }}/api/
   WebSocket:       ws://YOUR_IP:{{ .Values.service.http.port }}/ws/
   
   XMPP Clients:    YOUR_IP:{{ .Values.service.xmpp.port }}
   XMPP S2S:        YOUR_IP:{{ .Values.service.xmpps2s.port }}

3. Default admin credentials:
   
   Username: {{ (index .Values.ejabberd.admins 0) }}
   Password: admin123 (Change this immediately!)

4. Run comprehensive tests:

   cd tests/
   # Configure your endpoints in variables.env
   ./run-tests.sh

5. JWT Authentication:
   {{- if .Values.ejabberd.auth.methods.jwt.enabled }}
   ✅ JWT authentication is ENABLED
   JWT Key: {{ .Values.ejabberd.auth.methods.jwt.key }}
   
   Generate tokens via: POST /api/oauth/token
   {{- else }}
   ❌ JWT authentication is DISABLED
   Enable it in values.yaml: ejabberd.auth.methods.jwt.enabled: true
   {{- end }}

6. Enabled Modules:
   {{- if .Values.ejabberd.modules.mod_mam.enabled }}
   ✅ Message Archive Management (MAM)
   {{- end }}
   {{- if .Values.ejabberd.modules.mod_muc.enabled }}
   ✅ Multi-User Chat (MUC)
   {{- end }}
   {{- if .Values.ejabberd.modules.mod_push.enabled }}
   ✅ Push Notifications
   {{- end }}
   {{- if .Values.ejabberd.modules.mod_http_upload.enabled }}
   ✅ HTTP File Upload
   {{- end }}
   {{- if .Values.ejabberd.modules.mod_offline.enabled }}
   ✅ Offline Messages
   {{- end }}

7. Check deployment status:

   kubectl get pods -l app.kubernetes.io/name={{ include "ejabberd.name" . }}
   kubectl logs -l app.kubernetes.io/name={{ include "ejabberd.name" . }} -f

8. Troubleshooting:

   # Check ejabberd status
   kubectl exec deploy/{{ include "ejabberd.fullname" . }} -- ejabberdctl status
   
   # View configuration
   kubectl exec deploy/{{ include "ejabberd.fullname" . }} -- ejabberdctl dump_config
   
   # Check connected users
   kubectl exec deploy/{{ include "ejabberd.fullname" . }} -- ejabberdctl connected_users

For more information visit: https://docs.ejabberd.im/ 