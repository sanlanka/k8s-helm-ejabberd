# Default values for ejabberd
# This is a YAML-formatted file with comprehensive configuration options

# Image configuration
image:
  repository: ejabberd/ecs
  tag: "25.04"
  pullPolicy: IfNotPresent

# Image pull secrets
imagePullSecrets: []

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 9000
  runAsGroup: 9000
  fsGroup: 9000

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false

# Deployment configuration
replicaCount: 1
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1

# Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Node selector, tolerations and affinity
nodeSelector: {}
tolerations: []
affinity: {}

# Pod annotations and labels
podAnnotations: {}
podLabels: {}

# Persistence configuration
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# Service configuration
service:
  type: ClusterIP
  annotations: {}
  
  # XMPP client-to-server port
  xmpp:
    port: 5222
    targetPort: 5222
    
  # XMPP server-to-server port
  xmpps2s:
    port: 5269
    targetPort: 5269
    
  # HTTP/WebSocket port
  http:
    port: 5280
    targetPort: 5280
    
  # HTTPS/WebSocket Secure port
  https:
    port: 5443
    targetPort: 5443
    
  # MQTT port
  mqtt:
    port: 1883
    targetPort: 1883
    
  # MQTT over TLS port
  mqtts:
    port: 8883
    targetPort: 8883

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: ejabberd.local
      paths:
        - path: /
          pathType: Prefix
          service:
            port: 5280
  tls: []

# ejabberd specific configuration
ejabberd:
  # Domain configuration
  domain: "localhost"
  
  # Admin users (will be created automatically)
  admins:
    - admin@localhost
  
  # Authentication configuration
  auth:
    # Primary authentication method (jwt is default for Firebase tokens)
    primary: jwt
    
    # Available authentication methods
    methods:
      # JWT authentication (enabled by default for Firebase tokens)
      jwt:
        enabled: true
        key: "your-firebase-jwt-secret-key-change-this"
        algorithm: "HS256"
        # Firebase JWT specific settings
        firebase:
          enabled: true
          # Firebase project ID (will be extracted from token)
          project_id: "your-firebase-project-id"
          # Custom claims mapping
          claims:
            user_id: "user_id"  # Maps Firebase user_id to ejabberd username
            email: "email"      # Maps Firebase email to ejabberd email
            name: "name"        # Maps Firebase display_name to ejabberd fullname
          # JWT token validation
          validation:
            issuer: "https://securetoken.google.com/your-firebase-project-id"
            audience: "your-firebase-project-id"
            clock_skew: 300  # 5 minutes tolerance for clock skew
        
      # Internal authentication (fallback)
      internal:
        enabled: true
        
      # LDAP authentication
      ldap:
        enabled: false
        servers:
          - "ldap.example.com"
        port: 389
        bind_dn: "cn=admin,dc=example,dc=com"
        bind_password: "ldappassword"
        base: "dc=example,dc=com"
        filter: "(&(objectClass=posixAccount)(uid=%u))"
        tls: false
        
      # SQL authentication
      sql:
        enabled: false
        type: "pgsql"  # pgsql, mysql, sqlite3
        server: "localhost"
        port: 5432
        database: "ejabberd"
        username: "ejabberd"
        password: "password"
        
      # External authentication
      external:
        enabled: false
        program: "/path/to/auth/script"
        
      # Anonymous authentication
      anonymous:
        enabled: false
        allow_multiple_connections: false

  # Database configuration
  database:
    # Default database (mnesia for built-in, sql for external)
    type: "mnesia"  # mnesia, sql
    
    # SQL database configuration (when type is sql)
    sql:
      type: "pgsql"  # pgsql, mysql, sqlite3
      server: "localhost"
      port: 5432
      database: "ejabberd"
      username: "ejabberd"
      password: "password"
      pool_size: 10
      keepalive_interval: 60

  # TLS/SSL configuration
  tls:
    # Enable TLS support
    enabled: true
    
    # Certificate configuration
    certfile: "/opt/ejabberd/conf/server.pem"
    
    # Generate self-signed certificate if none provided
    generate_cert: true
    
    # Custom certificate (if you have your own)
    custom_cert:
      enabled: false
      cert: ""
      key: ""

  # Modules configuration
  modules:
    # Roster management
    mod_roster:
      enabled: true
      versioning: true
      
    # Multi-User Chat
    mod_muc:
      enabled: true
      access: muc
      access_admin: muc_admin
      access_create: muc_create
      access_persistent: muc_create
      
    # HTTP upload for file sharing
    mod_http_upload:
      enabled: true
      put_url: "https://ejabberd.local:5443/upload"
      get_url: "https://ejabberd.local:5443/upload"
      max_size: 104857600  # 100MB
      
    # Message Archive Management (MAM)
    mod_mam:
      enabled: true
      compress_xml: true
      
    # Push notifications
    mod_push:
      enabled: true
      
    # Offline message storage
    mod_offline:
      enabled: true
      access_max_user_messages: max_user_offline_messages
      
    # Private XML storage
    mod_private:
      enabled: true
      
    # Publish-Subscribe
    mod_pubsub:
      enabled: true
      access_createnode: pubsub_createnode
      
    # User avatar/vCard
    mod_vcard:
      enabled: true
      
    # Service discovery
    mod_disco:
      enabled: true
      
    # Stream management
    mod_stream_mgmt:
      enabled: true
      resend_on_timeout: if_offline
      
    # Registration
    mod_register:
      enabled: true
      access: register
      registration_watchers: []
      
    # Statistics
    mod_stats:
      enabled: true
      
    # Administrative interface
    mod_configure:
      enabled: true
      
    # REST API
    mod_http_api:
      enabled: true
      
    # MQTT broker
    mod_mqtt:
      enabled: true
      access_subscribe: all
      access_publish: all

  # Listen configuration
  listen:
    # XMPP client connections
    c2s:
      port: 5222
      ip: "::"
      module: ejabberd_c2s
      max_stanza_size: 65536
      shaper: c2s_shaper
      access: c2s
      
    # XMPP server connections  
    s2s:
      port: 5269
      ip: "::"
      module: ejabberd_s2s_in
      max_stanza_size: 131072
      
    # HTTP/WebSocket
    http:
      port: 5280
      ip: "::"
      module: ejabberd_http
      request_handlers:
        "/api": mod_http_api
        "/admin": ejabberd_web_admin
        "/upload": mod_http_upload
        "/ws": ejabberd_http_ws
        "/oauth": ejabberd_oauth
        
    # HTTPS/WebSocket Secure
    https:
      port: 5443
      ip: "::"
      module: ejabberd_http
      tls: true
      request_handlers:
        "/api": mod_http_api
        "/admin": ejabberd_web_admin
        "/upload": mod_http_upload
        "/ws": ejabberd_http_ws
        "/oauth": ejabberd_oauth
        
    # MQTT
    mqtt:
      port: 1883
      ip: "::"
      module: mod_mqtt
      
    # MQTT over TLS
    mqtts:
      port: 8883
      ip: "::"
      module: mod_mqtt
      tls: true

  # Access rules
  access_rules:
    local:
      - allow: local
    c2s:
      - deny: blocked
      - allow: all
    announce:
      - allow: admin
    configure:
      - allow: admin
    muc_create:
      - allow: local
    pubsub_createnode:
      - allow: local
    register:
      - allow: all
    
  # Shaper configuration
  shapers:
    normal: 1000
    fast: 50000
    
  # ACL (Access Control Lists)
  acl:
    local:
      user_regexp: ""
    admin:
      user: []  # Will be populated from admins list

  # API permissions
  api_permissions:
    "console commands":
      from:
        - ejabberd_ctl
      who: all
      what: "*"
    "admin access":
      who:
        - access:
            - allow:
              - user: "admin@localhost"
      what:
        - "*"
        - "!stop"
        - "!start"
    "public commands":
      who:
        - ip: "127.0.0.1/8"
      what:
        - "status"
        - "connected_users_number"

# Liveness and readiness probes
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    
  readiness:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Environment variables
env: []

# Extra volumes and volume mounts
extraVolumes: []
extraVolumeMounts: []

# Init containers
initContainers: []

# Sidecar containers
sidecars: [] 