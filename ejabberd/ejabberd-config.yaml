# ejabberd configuration file
# This file contains the ejabberd server configuration
# Reference: https://docs.ejabberd.im/admin/configuration/

# 1. Define your XMPP domains
hosts:
  - "ejabberd.local"

# 2. Logging level
loglevel: info

# 3. Use Mnesia (the default engine)
default_db: mnesia

# 4. Persist module queues to files under your Mnesia dir
queue_type: file
queue_dir: "/opt/ejabberd/database/queues"

# 5. (Optional) clustering config if you run multiple pods
# cluster_nodes: ["ejabberd@node1.example.com", "ejabberd@node2.example.com"]
# cluster_backend: pg2

# 6. Listen configuration
listen:
  # XMPP client connections (C2S)
  -
    port: 5222
    module: ejabberd_c2s
    max_stanza_size: 262144
    shaper: c2s_shaper
    access: c2s
  # XMPP server-to-server connections (S2S in)
  -
    port: 5269
    module: ejabberd_s2s_in
    max_stanza_size: 524288
  # HTTP admin interface & BOSH/Websocket
  -
    port: 5280
    module: ejabberd_http
    request_handlers:
      "/admin": ejabberd_web_admin
      "/api": mod_http_api
    web_admin: true
    http_bind: true

# 7. Enable both internal and JWT authentication
auth_method: [internal, jwt]

# 8. JWT configuration
jwt_key: "/opt/ejabberd/conf/jwt-key"
jwt_jid_field: jid

# 9. API permissions for JWT-based authentication
api_permissions:
  "console commands":
    from:
      - ejabberd_ctl
    who: all
    what: "*"
  "admin access":
    who:
      - admin
      - api
    what:
      - "*"
      - "!stop"
      - "!start"
      - "status"
      - "create_room"
      - "destroy_room"
      - "register"
      - "unregister"
      - "send_message"
      - "get_room_history"
      - "get_room_occupants"
      - "get_room_options"
      - "set_presence"
      - "get_presence"
      - "connected_users_info"
      - "connected_users_number"
      - "user_sessions_info"
      - "user_resources"
      - "send_chat_state"
      - "get_offline_count"
      - "mam_retrieve"
      - "mam_remove_archive"
      - "get_mam_preferences"
      - "set_mam_preferences"
  "user api access":
    who:
      - local
    what:
      - "send_message"
      - "get_roster"
      - "add_rosteritem"
      - "delete_rosteritem"
      - "get_presence"
      - "set_presence"
      - "subscribe_roster"
      - "unsubscribe_roster"
      - "get_vcard"
      - "set_vcard"
      - "get_offline_count"
      - "send_chat_state"
      - "get_user_rooms"
      - "get_room_occupants"
      - "join_room"
      - "leave_room"
      - "send_direct_invitation"
      - "connected_users"
      - "connected_users_number"
      - "connected_users_info"
      - "user_sessions_info"
      - "status"
      - "get_room_history"
      - "mam_retrieve"
  "jwt api access":
    from:
      - mod_http_api
    who:
      - all
    what:
      - "send_message"
      - "get_roster"
      - "get_presence"
      - "set_presence"
      - "get_vcard"
      - "set_vcard"
      - "connected_users"
      - "connected_users_number"
      - "connected_users_info"
      - "user_sessions_info"
      - "status"
      - "muc_online_rooms"
      - "get_room_occupants"
      - "get_room_options"
      - "get_room_history"
      - "mam_retrieve"

# 10. ACL definitions
acl:
  admin:
    user:
      - "admin@ejabberd.local"
  api:
    user:
      - "api@ejabberd.local"
  local:
    user_regexp: ""

# 11. Access rules
access_rules:
  local:
    - allow: local
  c2s:
    - deny: blocked
    - allow
  announce:
    - allow: admin
  configure:
    - allow: admin
  # MUC rules
  muc:
    - allow: all
  muc_admin:
    - allow: api
    - allow: admin
    - allow: local
  muc_create:
    - allow: all
  register:
    - allow: all
  trusted_network:
    - allow
  pubsub_createnode:
    - allow: local
  api_access:
    - allow: local
    - allow: admin
  mam:
    - allow: all

# 12. Module configuration
modules:
  # Ad-hoc commands & extras
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce:
    access: announce
  mod_disco: {}
  mod_caps: {}
  mod_http_api:
    default_version: 2

  # Presence & vcard
  mod_last: {}
  mod_vcard: {}
  mod_privacy: {}
  mod_private: {}

  # Roster & offline
  mod_roster:
    versioning: true
    store_current_id: false
  mod_offline:
    access_max_user_messages: max_user_offline_messages

  # Stream management & carbons
  mod_stream_mgmt: {}
  mod_carboncopy: {}
  mod_sic: {}
  mod_client_state: {}
  mod_push_keepalive: {}

  # Single-user message archiving (MAM)
  mod_mam:
    assume_mam_usage: true
    default: roster
    cache_size: 1000
    cache_missed: true
    cache_life_time: 3600
    request_activates_archiving: true

  # Multi-User Chat (MUC)
  mod_muc:
    host: "conference.@HOST@"
    access:
      - allow: muc
    access_create: muc_create
    access_admin: muc_admin
    default_room_options:
      members_only: false
      persistent: true
      public: true
      mam: true
      logging: true
  mod_muc_admin: {}
  mod_muc_log: {}
  mod_muc_occupantid: {}

  # PubSub & PEP
  mod_pubsub:
    access_createnode: pubsub_createnode
    plugins:
      - flat
      - pep
    force_node_config:
      "http://jabber.org/protocol/tune":
        access_model: presence
      "http://jabber.org/protocol/activity":
        access_model: presence
      "http://jabber.org/protocol/mood":
        access_model: presence
      "urn:xmpp:avatar:data":
        access_model: presence
      "urn:xmpp:avatar:metadata":
        access_model: presence

  # HTTP file upload
  mod_http_upload:
    put_url: "http://@HOST@:5280/upload"
    docroot: "/opt/ejabberd/upload"
    max_size: 10485760

  # Other utilities
  mod_ping: {}
  mod_time: {}
  mod_version: {}
  mod_register:
    access: register
  mod_shared_roster: {}
  mod_s2s_dialback: {}
  mod_push: {}
  mod_blocking: {}

# 13. Shaper rules
shaper_rules:
  max_user_sessions: 10
  max_user_offline_messages:
    - 5000: admin
    - 100
  c2s_shaper:
    - none: admin
    - normal
  s2s_shaper: fast

# 14. Shapers
shaper:
  normal: 1000
  fast: 50000
