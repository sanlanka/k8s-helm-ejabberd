# ejabberd configuration file
# This file contains the ejabberd server configuration
# Reference: https://docs.ejabberd.im/admin/configuration/

# Define your XMPP domains
hosts:
  - "ejabberd.local"

# Logging level
loglevel: info

# Use Mnesia (the default engine)
default_db: mnesia

# Persist module queues to files under your Mnesia dir
queue_type: file
queue_dir: "/opt/ejabberd/database/queues"

# (Optional) clustering config if you run multiple pods
# cluster_nodes: ["ejabberd@node1.example.com", "ejabberd@node2.example.com"]
# cluster_backend: pg2

# Listen configuration
listen:
  # XMPP client connections
  -
    port: 5222
    module: ejabberd_c2s
    max_stanza_size: 262144
    shaper: c2s_shaper
    access: c2s
  # XMPP server-to-server connections
  -
    port: 5269
    module: ejabberd_s2s_in
    max_stanza_size: 524288
  # HTTP admin interface
  -
    port: 5280
    module: ejabberd_http
    request_handlers:
      "/admin": ejabberd_web_admin
      "/api": mod_http_api
    web_admin: true
    http_bind: true

# Enable both internal and JWT authentication
auth_method: [internal, jwt]

# JWT configuration  
jwt_key: "/opt/ejabberd/conf/jwt-key"
jwt_jid_field: jid

# API permissions for JWT-based authentication
api_permissions:
  "console commands":
    from:
      - ejabberd_ctl
    who: all
    what: "*"
  "admin access":
    who:
      - admin
      - api
    what:
      - "*"
      - "!stop"
      - "!start"
      - "status"
  "user api access":
    who:
      - local
    what:
      - "send_message"
      - "get_roster"
      - "add_rosteritem"
      - "delete_rosteritem"
      - "get_presence"
      - "set_presence"
      - "subscribe_roster"
      - "unsubscribe_roster"
      - "get_vcard"
      - "set_vcard"
      - "get_offline_count"
      - "send_chat_state"
      - "get_user_rooms"
      - "get_room_occupants"
      - "join_room"
      - "leave_room"
      - "send_direct_invitation"
      - "connected_users"
      - "connected_users_number"
      - "connected_users_info"
      - "user_sessions_info"
      - "status"
  "jwt api access":
    from:
      - mod_http_api
    who:
      - all
    what:
      - "send_message"
      - "get_roster"
      - "get_presence"
      - "set_presence"
      - "get_vcard"
      - "set_vcard"
      - "connected_users"
      - "connected_users_number"
      - "connected_users_info"
      - "user_sessions_info"
      - "status"
      - "muc_online_rooms"
      - "get_room_occupants"
      - "get_room_options"

# ACL definitions
acl:
  admin:
    user:
      - "admin@ejabberd.local"
  api:
    user:
      - "api@ejabberd.local"
  local:
    user_regexp: ""

# 3. Access rules
access_rules:
  local:
    - allow: local
  c2s:
    - deny: blocked
    - allow
  announce:
    - allow: admin
  configure:
    - allow: admin
  # MUC access rules - allow anyone to create and join rooms
  muc:
    - allow: all
  muc_admin:
    - allow: api    # service account may create/destroy rooms
    - allow: admin
    - allow: local  # allow local users to manage rooms
  # Allow registration for all users
  register:
    - allow: all
  trusted_network:
    - allow
  pubsub_createnode:
    - allow: local
  # API access - allow local users to use HTTP API
  api_access:
    - allow: local
    - allow: admin

# 4. (Optional) If your token uses a different claim than "jid"
# jwt_jid_field: "user_claim"

# Module configuration
modules:
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce:
    access: announce
  mod_disco: {}
  mod_caps: {}
  mod_http_api:
    default_version: 2
  mod_last: {}
  # Core MUC service - allow anyone to create and join rooms
  mod_muc:
    host: "conference.@HOST@"
    access: muc
    access_admin: muc_admin
    default_room_options:
      persistent: true
      public: true
  # Admin API helpers for MUC
  mod_muc_admin: {}
  mod_offline:
    access_max_user_messages: max_user_offline_messages
  mod_ping: {}
  mod_privacy: {}
  mod_private: {}
  # Enable registration module
  mod_register:
    access: register
  mod_roster:
    versioning: true
    store_current_id: false
  mod_s2s_dialback: {}
  mod_shared_roster: {}
  mod_time: {}
  mod_vcard: {}
  mod_version: {}
  mod_mam:
    assume_mam_usage: true
    default: roster
  mod_http_upload:
    put_url: https://@HOST@:5443/upload
    docroot: "/opt/ejabberd/upload"
    max_size: 10485760
  # Enable presence and chat state functionality
  mod_carboncopy: {}
  mod_stream_mgmt: {}
  # Enable typing indicators and chat states
  mod_sic: {}
  mod_pubsub:
    access_createnode: pubsub_createnode
    plugins:
      - flat
      - pep
    force_node_config:
      "http://jabber.org/protocol/tune":
        access_model: presence
      "http://jabber.org/protocol/activity":
        access_model: presence
      "http://jabber.org/protocol/mood":
        access_model: presence
      "urn:xmpp:avatar:data":
        access_model: presence
      "urn:xmpp:avatar:metadata":
        access_model: presence
  mod_push: {}
  mod_muc_log: {}
  # Enable blocking command (XEP-0191)
  mod_blocking: {}

# Shaper rules
shaper_rules:
  max_user_sessions: 10
  max_user_offline_messages:
    - 5000: admin
    - 100
  c2s_shaper:
    - none: admin
    - normal
  s2s_shaper: fast

# Shapers
shaper:
  normal: 1000
  fast: 50000