# ejabberd configuration file
# This file contains the ejabberd server configuration
# Reference: https://docs.ejabberd.im/admin/configuration/

# Define your XMPP domains
hosts:
  - "ejabberd.local"

# Logging level
loglevel: info

# Use Mnesia (the default engine)
default_db: mnesia

# Persist module queues to files under your Mnesia dir
queue_type: file
queue_dir: "/opt/ejabberd/database/queues"

# (Optional) clustering config if you run multiple pods
# cluster_nodes: ["ejabberd@node1.example.com", "ejabberd@node2.example.com"]
# cluster_backend: pg2

# Listen configuration
listen:
  # XMPP client connections
  -
    port: 5222
    module: ejabberd_c2s
    max_stanza_size: 262144
    shaper: c2s_shaper
    access: c2s
  # XMPP server-to-server connections
  -
    port: 5269
    module: ejabberd_s2s_in
    max_stanza_size: 524288
  # HTTP admin interface
  -
    port: 5280
    module: ejabberd_http
    request_handlers:
      "/admin": ejabberd_web_admin
      "/api": mod_http_api
    web_admin: true
    http_bind: true

# Use only internal authentication for now
auth_method: internal

# JWT configuration (commented out for now)
# jwt_key: "/opt/ejabberd/conf/jwt-key"

# ACL definitions
acl:
  admin:
    user:
      - "admin@ejabberd.local"
  local:
    user_regexp: ""

# 3. Access rules
access_rules:
  local:
    - allow: local
  c2s:
    - deny: blocked
    - allow
  announce:
    - allow: admin
  configure:
    - allow: admin
  # MUC access rules - allow anyone to create and join rooms
  muc:
    - allow: all
  muc_admin:
    - allow: admin
  # Allow registration for all users
  register:
    - allow: all
  trusted_network:
    - allow
  pubsub_createnode:
    - allow: local

# 4. (Optional) If your token uses a different claim than "jid"
# jwt_jid_field: "user_claim"

# Module configuration
modules:
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce:
    access: announce
  mod_disco: {}
  mod_caps: {}
  mod_http_api:
    default_version: 2
  mod_last: {}
  # Core MUC service - allow anyone to create and join rooms
  mod_muc:
    host: "conference.@HOST@"
    access: muc
    access_admin: muc_admin
    default_room_options:
      persistent: true
      public: true
  # Admin API helpers for MUC
  mod_muc_admin: {}
  mod_offline:
    access_max_user_messages: max_user_offline_messages
  mod_ping: {}
  mod_privacy: {}
  mod_private: {}
  # Enable registration module
  mod_register:
    access: register
  mod_roster:
    versioning: true
  mod_s2s_dialback: {}
  mod_shared_roster: {}
  mod_time: {}
  mod_vcard: {}
  mod_version: {}
  mod_mam: {}
  mod_http_upload:
    put_url: https://@HOST@:5443/upload
    docroot: "/opt/ejabberd/upload"
    max_size: 10485760

  mod_pubsub:
    access_createnode: pubsub_createnode
    plugins:
      - flat
      - pep
  mod_push: {}
  mod_muc_log: {}

# Shaper rules
shaper_rules:
  max_user_sessions: 10
  max_user_offline_messages:
    - 5000: admin
    - 100
  c2s_shaper:
    - none: admin
    - normal
  s2s_shaper: fast

# Shapers
shaper:
  normal: 1000
  fast: 50000